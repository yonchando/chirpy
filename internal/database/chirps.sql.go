// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (
    id, body, user_id, created_at, updated_at
) VALUES ($1,$2,$3,$4,$5) RETURNING id, body, user_id, created_at, updated_at
`

type CreateChirpParams struct {
	ID        uuid.UUID
	Body      string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp,
		arg.ID,
		arg.Body,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllChirp = `-- name: DeleteAllChirp :exec
truncate table chirps cascade
`

func (q *Queries) DeleteAllChirp(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllChirp)
	return err
}

const deleteChirpByID = `-- name: DeleteChirpByID :exec
DELETE FROM chirps WHERE id = $1
`

func (q *Queries) DeleteChirpByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirpByID, id)
	return err
}

const findChirpByID = `-- name: FindChirpByID :one
SELECT id, body, user_id, created_at, updated_at FROM chirps where id = $1
`

func (q *Queries) FindChirpByID(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, findChirpByID, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT id, body, user_id, created_at, updated_at FROM chirps order by created_at
`

func (q *Queries) GetAllChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
